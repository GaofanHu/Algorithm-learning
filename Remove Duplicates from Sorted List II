Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.


这道题，因为是需要删除所有重复的数字，所以应该是prev -> curt -> next结构，要保证循环时，node是指在prev上，即prev肯定不会被删除。要判断的才是
curt和next是否要删除，且每次删除的是curt。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode dummy = new ListNode(Integer.MIN_VALUE);
        dummy.next = head;
        ListNode node = dummy;          //这里可以直接写  head = dummy，后面就用head代替node
        while(node.next != null && node.next.next != null){
            if(node.next.val == node.next.next.val){      //先判断再删除，不要直接while判断
                int val = node.next.val;          //因为每次删除重复元素的第一个，所以需要一个int来存储
                while(node.next != null && node.next.val == val){   //每次只删除一个最近的，不要想着直接删掉几个
                    node.next = node.next.next;
                }
            }else{
                node = node.next;     
                //用if,else的结构，这样如果遇到连续重复的时候，比如[1,1,1,2,2]，在上一层while删完1时，node.next是指在第一个2，如果不用else
                那么node会直接指向第一个2，在下一次判断时，node.next.next就为null，这时，[2,2]就无法删除。
            }
        }
        return dummy.next; 
        //这个地方，如果是return head，那么如果head被删除，整个返回就会不正确，比如[1,1,3,2,2,2]，只会返回[1,1,3],因为linked list的操作
        是针对于每个node的指针的，如果head被删除，那么返回head，一开始的删除操作就白做了。
    }
}
