因为要在log(m+n)的时间内完成，所以一定是二分搜索。可以预料的是，这道题是要找第k个数字，k即是中位数。
所以在两个数字分别查找k/2的数字，并且对比，去掉小的数字的前k/2部分，然后把规模下降到k-k/2，然后不断降低规模，最后完成二分

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        if((m + n) % 2 != 0){     //数组长度为单数和双数
            return kth(0, 0, (m + n)/2 + 1, nums1, nums2);
        }else{
            return (kth(0, 0, (m + n)/2, nums1, nums2) + kth(0, 0, (m + n)/2 + 1, nums1, nums2))/2.0;
        }
    }
    
    int kth(int p1, int p2, int k, int[] nums1, int[] nums2){
        if(p1 >= nums1.length){   //起始点比长度长时，直接返回另一个数组剩余的
            return nums2[p2 + k - 1];
        }else if(p2 >= nums2.length){
            return nums1[p1 + k - 1];
        }
        
        if(k == 1){
            return Math.min(nums1[p1], nums2[p2]);    //k剩下1个时，说明数组下一个就是要找的kth
        }
        
        int nums1_k = p1 + k/2 -1 < nums1.length?   //超出范围的设置为最大，可以先把没超出范围的，但是一定没有解的那部分删掉
            nums1[p1 + k/2 - 1]:Integer.MAX_VALUE;
        
        int nums2_k = p2 + k/2 - 1 < nums2.length?
            nums2[p2 + k/2 - 1]:Integer.MAX_VALUE;
        
        if(nums1_k < nums2_k){
            return kth(p1 + k/2, p2, k - k/2, nums1, nums2);
        }else{
            return kth(p1, p2 + k/2, k - k/2, nums1, nums2);
        }
    }
}
这道题要格外注意各种k的值，k与k/2（这些不用减1，是因为代表的就是数量），以及k/2 - 1(这个是因为要用这个值取数组里的值，数组从0开始，所以-1)
