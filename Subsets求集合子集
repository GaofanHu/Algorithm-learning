1.Subsets问题，求一个集合的所有子集

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        ArrayList<Integer> path = new ArrayList<Integer>();
        
        subsets(path, 0, nums, res);
        return res;
    }
        
    public void subsets(ArrayList<Integer> path, 
                        int pos, 
                        int[] nums, 
                        List<List<Integer>> res){
        
        res.add(new ArrayList<Integer>(path));
        
        for(int i = pos; i < nums.length; i++){
            path.add(nums[i]);
            subsets(path, i + 1, nums, res);    //这里不能用pos+1，因为当i会在for循环里自加，而pos不变
            path.remove(path.size()-1);         //这里如果直接删掉nums[i]，nums[i]是index，而不是值，那么因为i在for里循环，则会溢出
        }
    }
}

2.求集合的子集，但是不能有重复，比如：
If nums = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

这种情况，只需要考虑在for 循环中加一个判断：
if(i > 0 && nums[i] == nums[i-1] && i != pos)
                continue;
考虑i>0是因为当i=0时，nums[i-1]溢出。i != pos则是说这不是循环的第一次，当不是循环的第一次时，则不能添加两次一样的数值。
